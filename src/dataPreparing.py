#============================================================================================================
#================================ Libs =======================================================================
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import os
import warnings
#============================================================================================================
#================================ Preparing path to read data ===============================================
currPath=os.getcwd()
project_root=os.path.dirname(currPath)
dataPath=os.path.join(project_root,"data","raw")
#============================================================================================================
#================================ Read data =================================================================
data=pd.read_csv(os.path.join(dataPath,"Algerian_forest_fires_dataset_UPDATE.csv"))
#============================================================================================================
#================================ Fixing the columns names ==================================================
data.columns=data.columns.str.strip()
#============================================================================================================
#================================ Handel a row with problem =================================================
indx = data[data.isnull().any(axis=1)].index[0]
data.at[indx,"Classes"] = data.at[indx,"FWI"]
data.at[indx,"FWI"]= np.nan
#============================================================================================================
#================================ Drop nall =================================================================
data.dropna(inplace=True)
#============================================================================================================
#================================ preparing categorical data ================================================
data["Classes"] = data["Classes"].str.strip()
data["region"]=data["region"].str.strip()
#============================================================================================================
#================================ Split to features and target ==============================================
y = data["Classes"]
x = data.drop(["Classes"],axis=1)
#============================================================================================================
#================================Encoding categorical data===================================================
mapp={"Bejaia Region Dataset": 0,"Sidi-Bel Abbes Region Dataset":1}
x["region_encoded"] = x["region"].replace(mapp)
y[y=="not fire"] = 0
y[y=="fire"] = 1
y=y.astype('Float64')
#============================================================================================================
#================================ Drop some columns =========================================================
x=x.drop(["day","year","Ws","region"],axis=1)
#============================================================================================================
#================================ Split Data ================================================================
xtrain ,xtest,ytrain,ytest =train_test_split(x,y,test_size=.20,random_state=42)
#============================================================================================================
#================================ Prepairing path to save Data ==============================================
currPath=os.getcwd()
project_root=os.path.dirname(currPath)
dataSavePath=os.path.join(project_root,"data","processed")
#================================ Save Sata =================================================================
xtrain.to_csv(f"{dataSavePath}/xtrain.csv")
ytrain.to_csv(f"{dataSavePath}/ytrain.csv")
xtest.to_csv(f"{dataSavePath}/xtest.csv")
ytest.to_csv(f"{dataSavePath}/ytest.csv")
#============================================================================================================
#================================================= Done =====================================================
print("="*50)
print("-- Prepairing Data Done -- ")
print("="*50)
#============================================================================================================
#============================================================================================================